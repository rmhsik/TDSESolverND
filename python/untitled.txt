class TimeFreq:
    def __init__(self,data,freq,wstep):
        self.initdata = data
        self.w = freq
        self.wstep = wstep
        self.dw = np.abs(self.w[1]-self.w[0])
        self.freqs = []
        self.output = []
        self.calculate()
        
    def mask(self,w0):
        return np.exp(-4*np.log(2.0)*(self.w-w0)**2/self.wstep**2)
    def calculate(self):
        flast = 0.0
        for j in range(int(len(self.w))):
            f = self.w[j]#j*self.dw
            if (f-flast>self.wstep/1.5):
                flast = f
                self.freqs.append(f)
                temp = np.fft.ifft(self.mask(f)*self.initdata)
#                 temp = np.fft.fftshift(temp)
                self.output.append(np.conjugate(temp)*(temp))
        self.output = np.array(self.output)